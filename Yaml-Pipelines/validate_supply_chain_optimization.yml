
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches: 
    include:
    - 'feature/*'

pr:
  branches:
    include:
    - 'release/*'

pool:
  vmImage: ubuntu-latest

variables:
  bckstrgrg: "rg-sco-tfstate-sea-01"
  bckstrgstracc: "sascotfstatesea01"
  bckstrgctrnm: "terraform"
  bckstrky: "terraform.tfstate"
  anyTfChanges: false

stages:
  - stage: TerraformInstall
    displayName: Validate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: Terraform_Install
            inputs:
              terraformVersion: '1.4.6'
          - task: TerraformTaskV4@4
            displayName: terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendAzureRmResourceGroupName: '$(bckstrgrg)'
              backendAzureRmStorageAccountName: '$(bckstrgstracc)'
              backendAzureRmContainerName: '$(bckstrgctrnm)'
              backendAzureRmKey: '$(bckstrky)'
          
          
          - task: TerraformTaskV4@4
            displayName: terrafrom Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/tf-deploy'
              commandOptions: '-input=false -out=tf.plan -var-file=./tfvars/devv.tfvars'
              environmentServiceNameAzureRM: 'Azure_devops_Pipeline_service_connection'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write-Host "LASTEXITCODE : $LASTEXITCODE"
                      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
                      $actions = $plan.resource_changes.change.actions
                      Write-Host "Terraform actions : $actions"
                      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
                      {
                        Write-Host "Terraform will perform the following actions : $actions"
                        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
                      }
                      else
                      {
                        Write-Host "There is no change detected in Terraform tfplan file"
                      }
              workingDirectory: '$(System.DefaultWorkingDirectory)/tf-deploy'
          - task: TerraformTaskV4@4
            displayName: terraform apply
            condition: eq(variables.anyTfChanges, true)
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/tf-deploy'
              commandOptions: 'tfapply'
              environmentServiceNameAzureRM: 'Azure_devops_Pipeline_service_connection'
